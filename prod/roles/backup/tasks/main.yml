---
- name: Validate backup requirements
  block:
    - name: Check if backup directory exists
      stat:
        path: "{{ backup.directory | dirname }}"
      register: backup_parent_dir

    - name: Fail if backup parent directory doesn't exist
      fail:
        msg: "Backup parent directory {{ backup.directory | dirname }} does not exist. Please mount backup storage first."
      when: not backup_parent_dir.stat.exists

- name: Create backup directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: root
    group: root
  loop:
    - "{{ backup.directory }}"
    - "{{ backup.directory }}/k3s"
    - "{{ backup.directory }}/vault"
    - "{{ backup.directory }}/etcd"
    - "{{ backup.directory }}/scripts"
    - "{{ backup.directory }}/logs"

- name: Create backup script for K3s
  copy:
    dest: "{{ backup.directory }}/scripts/backup-k3s.sh"
    mode: '0755'
    content: |
      #!/bin/bash
      set -euo pipefail
      
      BACKUP_DIR="{{ backup.directory }}/k3s"
      DATE=$(date +%Y%m%d_%H%M%S)
      LOG_FILE="{{ backup.directory }}/logs/k3s-backup-${DATE}.log"
      
      echo "Starting K3s backup at $(date)" | tee -a "$LOG_FILE"
      
      # Create backup with timestamp
      BACKUP_FILE="${BACKUP_DIR}/k3s_backup_${DATE}.tar.gz"
      
      # Backup K3s data
      tar czf "$BACKUP_FILE" \
        /var/lib/rancher/k3s \
        /etc/rancher/k3s \
        /etc/systemd/system/k3s*.service \
        2>&1 | tee -a "$LOG_FILE"
      
      # Verify backup
      if tar -tzf "$BACKUP_FILE" >/dev/null 2>&1; then
        echo "Backup verification successful: $BACKUP_FILE" | tee -a "$LOG_FILE"
      else
        echo "ERROR: Backup verification failed: $BACKUP_FILE" | tee -a "$LOG_FILE"
        exit 1
      fi
      
      # Cleanup old backups (keep last {{ backup.retention_days }} days)
      find "${BACKUP_DIR}" -name "k3s_backup_*.tar.gz" -mtime +{{ backup.retention_days }} -delete 2>&1 | tee -a "$LOG_FILE"
      
      echo "K3s backup completed successfully at $(date)" | tee -a "$LOG_FILE"

- name: Create backup script for Vault
  copy:
    dest: "{{ backup.directory }}/scripts/backup-vault.sh"
    mode: '0755'
    content: |
      #!/bin/bash
      set -euo pipefail
      
      BACKUP_DIR="{{ backup.directory }}/vault"
      DATE=$(date +%Y%m%d_%H%M%S)
      LOG_FILE="{{ backup.directory }}/logs/vault-backup-${DATE}.log"
      
      echo "Starting Vault backup at $(date)" | tee -a "$LOG_FILE"
      
      # Check if Vault is running
      if ! systemctl is-active --quiet vault; then
        echo "WARNING: Vault service is not running" | tee -a "$LOG_FILE"
        exit 1
      fi
      
      # Create backup with timestamp
      BACKUP_FILE="${BACKUP_DIR}/vault_backup_${DATE}.tar.gz"
      
      # Backup Vault data and configuration
      tar czf "$BACKUP_FILE" \
        /opt/vault/data \
        /etc/vault.d \
        2>&1 | tee -a "$LOG_FILE"
      
      # Verify backup
      if tar -tzf "$BACKUP_FILE" >/dev/null 2>&1; then
        echo "Backup verification successful: $BACKUP_FILE" | tee -a "$LOG_FILE"
      else
        echo "ERROR: Backup verification failed: $BACKUP_FILE" | tee -a "$LOG_FILE"
        exit 1
      fi
      
      # Cleanup old backups
      find "${BACKUP_DIR}" -name "vault_backup_*.tar.gz" -mtime +{{ backup.retention_days }} -delete 2>&1 | tee -a "$LOG_FILE"
      
      echo "Vault backup completed successfully at $(date)" | tee -a "$LOG_FILE"
  when: vault.mode == "prod"

- name: Create restore script for K3s
  copy:
    dest: "{{ backup.directory }}/scripts/restore-k3s.sh"
    mode: '0755'
    content: |
      #!/bin/bash
      set -euo pipefail
      
      if [ $# -ne 1 ]; then
        echo "Usage: $0 <backup_file>"
        echo "Available backups:"
        ls -la {{ backup.directory }}/k3s/k3s_backup_*.tar.gz 2>/dev/null || echo "No backups found"
        exit 1
      fi
      
      BACKUP_FILE="$1"
      LOG_FILE="{{ backup.directory }}/logs/k3s-restore-$(date +%Y%m%d_%H%M%S).log"
      
      echo "Starting K3s restore from $BACKUP_FILE at $(date)" | tee -a "$LOG_FILE"
      
      # Verify backup file exists
      if [ ! -f "$BACKUP_FILE" ]; then
        echo "ERROR: Backup file $BACKUP_FILE not found" | tee -a "$LOG_FILE"
        exit 1
      fi
      
      # Stop K3s services
      echo "Stopping K3s services..." | tee -a "$LOG_FILE"
      systemctl stop k3s k3s-agent 2>&1 | tee -a "$LOG_FILE" || true
      
      # Backup current state before restore
      CURRENT_BACKUP="/tmp/k3s_pre_restore_$(date +%Y%m%d_%H%M%S).tar.gz"
      echo "Creating pre-restore backup: $CURRENT_BACKUP" | tee -a "$LOG_FILE"
      tar czf "$CURRENT_BACKUP" /var/lib/rancher/k3s /etc/rancher/k3s 2>&1 | tee -a "$LOG_FILE" || true
      
      # Restore from backup
      echo "Restoring from backup..." | tee -a "$LOG_FILE"
      cd /
      tar xzf "$BACKUP_FILE" 2>&1 | tee -a "$LOG_FILE"
      
      # Start K3s services
      echo "Starting K3s services..." | tee -a "$LOG_FILE"
      systemctl start k3s 2>&1 | tee -a "$LOG_FILE"
      
      # Wait for K3s to be ready
      echo "Waiting for K3s to be ready..." | tee -a "$LOG_FILE"
      timeout 300 bash -c 'until kubectl get nodes >/dev/null 2>&1; do sleep 5; done' 2>&1 | tee -a "$LOG_FILE"
      
      echo "K3s restore completed successfully at $(date)" | tee -a "$LOG_FILE"
      echo "Pre-restore backup saved at: $CURRENT_BACKUP" | tee -a "$LOG_FILE"

- name: Create disaster recovery documentation
  copy:
    dest: "{{ backup.directory }}/DISASTER_RECOVERY.md"
    content: |
      # Disaster Recovery Procedures
      
      ## Backup Schedule
      - K3s: Daily at {{ backup.schedule.hour }}:{{ backup.schedule.minute }}
      - Vault: Daily at {{ backup.schedule.hour }}:{{ backup.schedule.minute }} (if prod mode)
      - Retention: {{ backup.retention_days }} days
      
      ## Manual Backup
      ```bash
      # K3s backup
      {{ backup.directory }}/scripts/backup-k3s.sh
      
      # Vault backup (prod mode only)
      {{ backup.directory }}/scripts/backup-vault.sh
      ```
      
      ## Restore Procedures
      
      ### K3s Cluster Restore
      ```bash
      # List available backups
      ls -la {{ backup.directory }}/k3s/
      
      # Restore from specific backup
      {{ backup.directory }}/scripts/restore-k3s.sh {{ backup.directory }}/k3s/k3s_backup_YYYYMMDD_HHMMSS.tar.gz
      ```
      
      ### Vault Restore (Production Mode)
      ```bash
      # Stop Vault
      systemctl stop vault
      
      # Restore Vault data
      cd /
      tar xzf {{ backup.directory }}/vault/vault_backup_YYYYMMDD_HHMMSS.tar.gz
      
      # Start Vault
      systemctl start vault
      
      # Unseal Vault (if using manual unsealing)
      vault operator unseal
      ```
      
      ## Complete Cluster Rebuild
      
      1. **Prepare new nodes** with same IP addresses and hostnames
      2. **Run Ansible playbook** to reinstall cluster
      3. **Restore from backup** using procedures above
      4. **Verify all services** are running correctly
      
      ## Backup Verification
      ```bash
      # Check backup integrity
      tar -tzf {{ backup.directory }}/k3s/k3s_backup_YYYYMMDD_HHMMSS.tar.gz
      
      # Check backup logs
      tail -f {{ backup.directory }}/logs/*.log
      ```
      
      ## Emergency Contacts
      - Primary Admin: [Add contact info]
      - Secondary Admin: [Add contact info]
      - Infrastructure Team: [Add contact info]

- name: Setup cron job for daily K3s backup
  cron:
    name: "K3s backup daily"
    user: root
    minute: "{{ backup.schedule.minute }}"
    hour: "{{ backup.schedule.hour }}"
    job: "{{ backup.directory }}/scripts/backup-k3s.sh"

- name: Setup cron job for daily Vault backup
  cron:
    name: "Vault backup daily"
    user: root
    minute: "{{ backup.schedule.minute + 15 }}"
    hour: "{{ backup.schedule.hour }}"
    job: "{{ backup.directory }}/scripts/backup-vault.sh"
  when: vault.mode == "prod"

- name: Setup log rotation for backup logs
  copy:
    dest: /etc/logrotate.d/k3s-backup
    content: |
      {{ backup.directory }}/logs/*.log {
        daily
        rotate 30
        compress
        delaycompress
        missingok
        notifempty
        create 644 root root
      }

- name: Display backup configuration
  debug:
    msg:
      - "Backup system configured successfully!"
      - "Backup directory: {{ backup.directory }}"
      - "K3s backup schedule: Daily at {{ backup.schedule.hour }}:{{ backup.schedule.minute }}"
      - "{% if vault.mode == 'prod' %}Vault backup schedule: Daily at {{ backup.schedule.hour }}:{{ backup.schedule.minute + 15 }}{% endif %}"
      - "Retention period: {{ backup.retention_days }} days"
      - "Manual backup: {{ backup.directory }}/scripts/backup-k3s.sh"
      - "Restore script: {{ backup.directory }}/scripts/restore-k3s.sh"
      - "Documentation: {{ backup.directory }}/DISASTER_RECOVERY.md"
