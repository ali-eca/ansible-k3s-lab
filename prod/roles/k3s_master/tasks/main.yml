---
- name: Validate master node requirements
  block:
    - name: Check if running as root or with sudo
      fail:
        msg: "This playbook must be run with sudo privileges"
      when: ansible_user_uid != 0 and ansible_become != true

    - name: Check available memory
      fail:
        msg: "Insufficient memory. K3s master requires at least 1GB RAM"
      when: ansible_memtotal_mb < 1024

    - name: Check available disk space
      fail:
        msg: "Insufficient disk space. K3s requires at least 5GB free space"
      when: ansible_mounts | selectattr('mount', 'equalto', '/') | map(attribute='size_available') | first < 5368709120

- name: Install dependencies on master
  apt:
    name:
      - curl
      - apt-transport-https
      - ca-certificates
      - software-properties-common
      - gnupg2
      - lm-sensors
      - glances
    update_cache: yes
    state: present
  register: apt_result
  retries: 3
  delay: 10
  until: apt_result is succeeded

- name: Check if K3s systemd service exists
  stat:
    path: /etc/systemd/system/k3s.service
  register: k3s_service_check

- name: Check if K3s agent service exists (worker mode)
  stat:
    path: /etc/systemd/system/k3s-agent.service
  register: k3s_agent_service_check

- name: Stop and disable K3s agent service if running as worker
  systemd:
    name: k3s-agent
    state: stopped
    enabled: no
  when: k3s_agent_service_check.stat.exists

- name: Remove K3s agent service file
  file:
    path: /etc/systemd/system/k3s-agent.service
    state: absent
  when: k3s_agent_service_check.stat.exists

- name: Remove existing K3s binary if service doesn't exist
  file:
    path: /usr/local/bin/k3s
    state: absent
  when: not k3s_service_check.stat.exists

- name: Install K3s on master without Traefik
  shell: |
    curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--disable={{ k3s.disable_components | join(',--disable=') }}" sh -
  args:
    creates: /usr/local/bin/k3s
  register: k3s_install_result
  retries: 3
  delay: 30
  until: k3s_install_result is succeeded

- name: Debug K3s installation result
  debug:
    msg: "K3s install result: {{ k3s_install_result }}"

- name: Check if systemd service file exists after install
  stat:
    path: /etc/systemd/system/k3s.service
  register: k3s_service_file_check

- name: Debug systemd service file check
  debug:
    msg: "K3s service file exists: {{ k3s_service_file_check.stat.exists }}"

- name: Reload systemd daemon
  systemd:
    daemon_reload: yes
  when: k3s_service_file_check.stat.exists

- name: Enable and start K3s service
  systemd:
    name: k3s
    state: started
    enabled: yes
  when: k3s_service_file_check.stat.exists

- name: Debug IP addresses
  debug:
    msg: "ansible_host: {{ ansible_host }}, ansible_default_ipv4.address: {{ ansible_default_ipv4.address }}"

- name: Wait for K3s to be ready
  wait_for:
    port: "{{ services.k3s_api }}"
    host: "{{ ansible_host }}"
    delay: 10
    timeout: 600
  register: k3s_ready

- name: Wait a bit more for K3s to fully initialize
  pause:
    seconds: 30

- name: Verify K3s installation
  command: k3s kubectl get nodes
  register: k3s_nodes
  changed_when: false
  retries: 10
  delay: 15
  until: k3s_nodes is succeeded

- name: Fetch K3s node token
  command: cat /var/lib/rancher/k3s/server/node-token
  register: k3s_token_result
  changed_when: false
  retries: 3
  delay: 5
  until: k3s_token_result is succeeded

- name: Validate K3s token
  fail:
    msg: "Failed to retrieve K3s token"
  when: k3s_token_result.stdout | length == 0

- set_fact:
    k3s_token: "{{ k3s_token_result.stdout }}"

- name: Copy K3s kubeconfig to local machine
  fetch:
    src: /etc/rancher/k3s/k3s.yaml
    dest: /tmp/k3s-prod-kubeconfig.yaml
    flat: yes
  register: fetch_result
  retries: 5
  delay: 2
  until: fetch_result is succeeded

- name: Debug fetch result
  debug:
    msg: "Fetch result: {{ fetch_result }}"

- name: Check if kubeconfig file exists on localhost
  stat:
    path: /tmp/k3s-prod-kubeconfig.yaml
  register: kubeconfig_stat
  delegate_to: localhost

- name: Debug kubeconfig file status
  debug:
    msg: "Kubeconfig file exists: {{ kubeconfig_stat.stat.exists }}, path: /tmp/k3s-prod-kubeconfig.yaml"

- name: Update kubeconfig server URL
  replace:
    path: /tmp/k3s-prod-kubeconfig.yaml
    regexp: 'server: https://127\.0\.0\.1:6443'
    replace: 'server: https://{{ master_node.ip }}:{{ services.k3s_api }}'
  when: fetch_result is succeeded and kubeconfig_stat.stat.exists
  delegate_to: localhost

- name: Rename cluster, user, and context in kubeconfig to prod
  replace:
    path: /tmp/k3s-prod-kubeconfig.yaml
    regexp: 'name: default'
    replace: 'name: prod'
  when: fetch_result is succeeded and kubeconfig_stat.stat.exists
  delegate_to: localhost

- name: Copy updated kubeconfig to prod folder in codebase
  shell: cp /tmp/k3s-prod-kubeconfig.yaml ./k3s-prod-kubeconfig.yaml
  args:
    creates: k3s-prod-kubeconfig.yaml
  when: fetch_result is succeeded and kubeconfig_stat.stat.exists
  delegate_to: localhost

- name: Display K3s access information
  debug:
    msg:
      - "K3s master installed successfully"
      - "API Server: {{ k3s.server_url }}"
      - "Node status: {{ k3s_nodes.stdout_lines }}"
      - "Kubeconfig copied to: ~/k3s-prod-kubeconfig.yaml"
      - "Context set to: prod"
      - "To use with skaffold, set KUBECONFIG environment variable:"
      - "export KUBECONFIG=~/k3s-prod-kubeconfig.yaml"
      - "Or copy to ~/.kube/config for default kubectl access"
