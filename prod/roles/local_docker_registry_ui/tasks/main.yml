- name: Deploy Docker Registry and UI (with CORS + proxy + split ports)
  delegate_to: opti-3050
  ansible.builtin.copy:
    mode: '0644'
    dest: /tmp/registry-ui.yaml
    content: |
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: registry-ui-proxy-config
        namespace: default
      data:
        default.conf: |
          server {
            listen 8080;
            
            # Serve registry UI
            location / {
              proxy_pass http://localhost:80;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              
              # CORS headers for UI
              add_header 'Access-Control-Allow-Origin' '*' always;
              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
              add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, X-Requested-With' always;
              
              if ($request_method = OPTIONS) {
                return 204;
              }
            }
            
            # Proxy registry API calls through ingress
            location /v2/ {
              proxy_pass http://registry.local/v2/;
              proxy_set_header Host registry.local;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }
          }
      ---
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: registry
        namespace: default
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: registry
        template:
          metadata:
            labels:
              app: registry
          spec:
            containers:
            - name: registry
              image: registry:2
              ports:
              - containerPort: 5000
              env:
              - name: REGISTRY_HTTP_ADDR
                value: :5000
              resources:
                requests:
                  memory: "128Mi"
                  cpu: "100m"
                limits:
                  memory: "256Mi"
                  cpu: "200m"
              livenessProbe:
                httpGet:
                  path: /v2/
                  port: 5000
                initialDelaySeconds: 30
                periodSeconds: 10
              readinessProbe:
                httpGet:
                  path: /v2/
                  port: 5000
                initialDelaySeconds: 10
                periodSeconds: 5
              volumeMounts:
              - name: registry-storage
                mountPath: /var/lib/registry
            volumes:
            - name: registry-storage
              emptyDir: {}
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: registry
        namespace: default
      spec:
        selector:
          app: registry
        ports:
        - protocol: TCP
          port: 5000
          targetPort: 5000
          nodePort: {{ registry_host.port }}
        type: NodePort
      ---
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: registry-ui
        namespace: default
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: registry-ui
        template:
          metadata:
            labels:
              app: registry-ui
          spec:
            hostAliases:
            - ip: "192.168.1.100"
              hostnames:
              - "registry.local"
            securityContext:
              runAsNonRoot: true
              runAsUser: 101
              runAsGroup: 101
              fsGroup: 101
              seccompProfile:
                type: RuntimeDefault
            containers:
            - name: ui
              image: joxit/docker-registry-ui:latest
              ports:
              - containerPort: 80
              env:
              - name: REGISTRY_URL
                value: "http://192.168.1.100"
              - name: REGISTRY_TITLE
                value: "K3s Local Registry"
              - name: DELETE_IMAGES
                value: "true"
              - name: SINGLE_REGISTRY
                value: "true"
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
                runAsNonRoot: true
                seccompProfile:
                  type: RuntimeDefault
              resources:
                requests:
                  memory: "64Mi"
                  cpu: "100m"
                limits:
                  memory: "128Mi"
                  cpu: "200m"
              livenessProbe:
                httpGet:
                  path: /
                  port: 80
                initialDelaySeconds: 30
                periodSeconds: 10
              readinessProbe:
                httpGet:
                  path: /
                  port: 80
                initialDelaySeconds: 5
                periodSeconds: 5
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: registry-ui
        namespace: default
      spec:
        selector:
          app: registry-ui
        ports:
        - protocol: TCP
          port: 80
          targetPort: 80
          nodePort: {{ registry_host.ui_port }}
        type: NodePort

- name: Apply Registry + UI manifests (CORS + proxy)
  ansible.builtin.shell: |
    kubectl apply --kubeconfig /etc/rancher/k3s/k3s.yaml -f /tmp/registry-ui.yaml
  delegate_to: opti-3050
