---
- name: Create monitoring namespace
  kubernetes.core.k8s:
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    name: "{{ monitoring.namespace }}"
    api_version: v1
    kind: Namespace
    state: present
  when: monitoring.enabled | default(false)

- name: Deploy Prometheus
  kubernetes.core.k8s:
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: prometheus
        namespace: "{{ monitoring.namespace }}"
        labels:
          app: prometheus
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: prometheus
        template:
          metadata:
            labels:
              app: prometheus
          spec:
            containers:
            - name: prometheus
              image: prom/prometheus:latest
              ports:
              - containerPort: 9090
              args:
                - '--config.file=/etc/prometheus/prometheus.yml'
                - '--storage.tsdb.path=/prometheus/'
                - '--web.console.libraries=/etc/prometheus/console_libraries'
                - '--web.console.templates=/etc/prometheus/consoles'
                - '--storage.tsdb.retention.time=200h'
                - '--web.enable-lifecycle'
              resources:
                requests:
                  memory: "256Mi"
                  cpu: "200m"
                limits:
                  memory: "512Mi"
                  cpu: "500m"
              livenessProbe:
                httpGet:
                  path: /-/healthy
                  port: 9090
                initialDelaySeconds: 30
                periodSeconds: 10
              readinessProbe:
                httpGet:
                  path: /-/ready
                  port: 9090
                initialDelaySeconds: 5
                periodSeconds: 5
              volumeMounts:
              - name: prometheus-config
                mountPath: /etc/prometheus/
              - name: prometheus-storage
                mountPath: /prometheus/
            volumes:
            - name: prometheus-config
              configMap:
                name: prometheus-config
            - name: prometheus-storage
              emptyDir: {}
  when: monitoring.enabled | default(false)

- name: Create Prometheus ConfigMap
  kubernetes.core.k8s:
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: prometheus-config
        namespace: "{{ monitoring.namespace }}"
      data:
        prometheus.yml: |
          global:
            scrape_interval: 15s
            evaluation_interval: 15s

          rule_files:
            # - "first_rules.yml"
            # - "second_rules.yml"

          scrape_configs:
            - job_name: 'prometheus'
              static_configs:
                - targets: ['localhost:9090']

            - job_name: 'kubernetes-apiservers'
              kubernetes_sd_configs:
              - role: endpoints
              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              relabel_configs:
              - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
                action: keep
                regex: default;kubernetes;https

            - job_name: 'kubernetes-nodes'
              kubernetes_sd_configs:
              - role: node
              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)

            - job_name: 'kubernetes-pods'
              kubernetes_sd_configs:
              - role: pod
              relabel_configs:
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                action: replace
                regex: ([^:]+)(?::\d+)?;(\d+)
                replacement: $1:$2
                target_label: __address__
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: kubernetes_namespace
              - source_labels: [__meta_kubernetes_pod_name]
                action: replace
                target_label: kubernetes_pod_name

            - job_name: 'prod-cluster-nodes'
              static_configs:
                - targets: ['10.40.0.52:10250', '10.40.0.55:10250']
              scheme: https
              tls_config:
                insecure_skip_verify: true
              relabel_configs:
              - target_label: cluster
                replacement: prod

            - job_name: 'prod-cluster-kubelet'
              static_configs:
                - targets: ['10.40.0.52:10255', '10.40.0.55:10255']
              scheme: http
              relabel_configs:
              - target_label: cluster
                replacement: prod
  when: monitoring.enabled | default(false)

- name: Create Prometheus Service
  kubernetes.core.k8s:
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: prometheus
        namespace: "{{ monitoring.namespace }}"
        labels:
          app: prometheus
      spec:
        selector:
          app: prometheus
        ports:
        - protocol: TCP
          port: 9090
          targetPort: 9090
          nodePort: 30090
        type: NodePort
  when: monitoring.enabled | default(false)

- name: Deploy Grafana
  kubernetes.core.k8s:
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: grafana
        namespace: "{{ monitoring.namespace }}"
        labels:
          app: grafana
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: grafana
        template:
          metadata:
            labels:
              app: grafana
          spec:
            containers:
            - name: grafana
              image: grafana/grafana:latest
              ports:
              - containerPort: 3000
              env:
              - name: GF_SECURITY_ADMIN_PASSWORD
                value: "admin123"
              - name: GF_USERS_ALLOW_SIGN_UP
                value: "false"
              resources:
                requests:
                  memory: "128Mi"
                  cpu: "100m"
                limits:
                  memory: "256Mi"
                  cpu: "200m"
              livenessProbe:
                httpGet:
                  path: /api/health
                  port: 3000
                initialDelaySeconds: 30
                periodSeconds: 10
              readinessProbe:
                httpGet:
                  path: /api/health
                  port: 3000
                initialDelaySeconds: 5
                periodSeconds: 5
              volumeMounts:
              - name: grafana-storage
                mountPath: /var/lib/grafana
            volumes:
            - name: grafana-storage
              emptyDir: {}
  when: monitoring.enabled | default(false)

- name: Create Grafana Service
  kubernetes.core.k8s:
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: grafana
        namespace: "{{ monitoring.namespace }}"
        labels:
          app: grafana
      spec:
        selector:
          app: grafana
        ports:
        - protocol: TCP
          port: 3000
          targetPort: 3000
          nodePort: 30300
        type: NodePort
  when: monitoring.enabled | default(false)

- name: Create ServiceAccount for Prometheus
  kubernetes.core.k8s:
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: prometheus
        namespace: "{{ monitoring.namespace }}"
  when: monitoring.enabled | default(false)

- name: Create ClusterRole for Prometheus
  kubernetes.core.k8s:
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: prometheus
      rules:
      - apiGroups: [""]
        resources:
        - nodes
        - nodes/proxy
        - services
        - endpoints
        - pods
        verbs: ["get", "list", "watch"]
      - apiGroups:
        - extensions
        resources:
        - ingresses
        verbs: ["get", "list", "watch"]
      - nonResourceURLs: ["/metrics"]
        verbs: ["get"]
  when: monitoring.enabled | default(false)

- name: Create ClusterRoleBinding for Prometheus
  kubernetes.core.k8s:
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: prometheus
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: prometheus
      subjects:
      - kind: ServiceAccount
        name: prometheus
        namespace: "{{ monitoring.namespace }}"
  when: monitoring.enabled | default(false)

- name: Display monitoring access information
  debug:
    msg:
      - "Monitoring stack deployed successfully!"
      - "Prometheus: http://{{ master_node.ip }}:30090"
      - "Grafana: http://{{ master_node.ip }}:30300 (admin/admin123)"
      - "To enable monitoring, set monitoring.enabled: true in group_vars/all/main.yml"
  when: monitoring.enabled | default(false)